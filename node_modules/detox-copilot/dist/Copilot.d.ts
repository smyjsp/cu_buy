import { Config } from "./types";
/**
 * The main Copilot class that provides AI-assisted testing capabilities for a given underlying testing framework.
 * @note Originally, this class is designed to work with Detox, but it can be extended to work with other frameworks.
 */
export declare class Copilot {
    static instance?: Copilot;
    private readonly promptCreator;
    private readonly codeEvaluator;
    private readonly snapshotManager;
    private previousSteps;
    private stepPerformer;
    private constructor();
    /**
     * Gets the singleton instance of Copilot.
     * @returns The Copilot instance.
     */
    static getInstance(): Copilot;
    /**
     * Initializes the Copilot with the provided configuration, must be called before using Copilot.
     * @param config The configuration options for Copilot.
     */
    static init(config: Config): void;
    /**
     * Performs a test step based on the given prompt.
     * @param step The step describing the operation to perform.
     */
    performStep(step: string): Promise<any>;
    /**
     * Resets the Copilot by clearing the previous steps.
     * @note This must be called before starting a new test flow, in order to clean context from previous tests.
     */
    reset(): void;
    private didPerformStep;
}
