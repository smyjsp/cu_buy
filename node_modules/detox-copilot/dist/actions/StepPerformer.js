"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepPerformer = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const extractCodeBlock_1 = require("../utils/extractCodeBlock");
class StepPerformer {
    context;
    promptCreator;
    codeEvaluator;
    snapshotManager;
    promptHandler;
    cache = new Map();
    cacheFilePath;
    constructor(context, promptCreator, codeEvaluator, snapshotManager, promptHandler, cacheFileName = 'detox_copilot_cache.json') {
        this.context = context;
        this.promptCreator = promptCreator;
        this.codeEvaluator = codeEvaluator;
        this.snapshotManager = snapshotManager;
        this.promptHandler = promptHandler;
        this.cacheFilePath = path.resolve(process.cwd(), cacheFileName);
    }
    generateCacheKey(step, previous, viewHierarchy) {
        const viewHierarchyHash = crypto.createHash('md5').update(viewHierarchy).digest('hex');
        return JSON.stringify({ step, previous, viewHierarchyHash });
    }
    loadCacheFromFile() {
        try {
            if (fs.existsSync(this.cacheFilePath)) {
                const data = fs.readFileSync(this.cacheFilePath, 'utf-8');
                const json = JSON.parse(data);
                this.cache = new Map(Object.entries(json));
            }
            else {
                this.cache.clear(); // Ensure cache is empty if file doesn't exist
            }
        }
        catch (error) {
            console.warn('Error loading cache from file:', error);
            this.cache.clear(); // Clear cache on error to avoid stale data
        }
    }
    saveCacheToFile() {
        try {
            const json = Object.fromEntries(this.cache);
            fs.writeFileSync(this.cacheFilePath, JSON.stringify(json, null, 2), { flag: 'w+' });
        }
        catch (error) {
            console.error('Error saving cache to file:', error);
        }
    }
    async captureSnapshotAndViewHierarchy() {
        const snapshot = this.promptHandler.isSnapshotImageSupported()
            ? await this.snapshotManager.captureSnapshotImage()
            : undefined;
        const viewHierarchy = await this.snapshotManager.captureViewHierarchyString();
        const isSnapshotImageAttached = snapshot != null && this.promptHandler.isSnapshotImageSupported();
        return { snapshot, viewHierarchy, isSnapshotImageAttached };
    }
    shouldOverrideCache() {
        return process.env.COPILOT_OVERRIDE_CACHE === "true" || process.env.COPILOT_OVERRIDE_CACHE === "1";
    }
    async generateCode(step, previous, snapshot, viewHierarchy, isSnapshotImageAttached) {
        const cacheKey = this.generateCacheKey(step, previous, viewHierarchy);
        if (!this.shouldOverrideCache() && this.cache.has(cacheKey)) {
            return this.cache.get(cacheKey);
        }
        else {
            const prompt = this.promptCreator.createPrompt(step, viewHierarchy, isSnapshotImageAttached, previous);
            const promptResult = await this.promptHandler.runPrompt(prompt, snapshot);
            const code = (0, extractCodeBlock_1.extractCodeBlock)(promptResult);
            this.cache.set(cacheKey, code);
            this.saveCacheToFile();
            return code;
        }
    }
    async perform(step, previous = [], attempts = 2) {
        // TODO: replace with the user's logger
        console.log('\x1b[90m%s\x1b[0m%s', 'Copilot performing:', `"${step}"`);
        this.loadCacheFromFile();
        let lastError = null;
        let lastCode;
        for (let attempt = 1; attempt <= attempts; attempt++) {
            try {
                const { snapshot, viewHierarchy, isSnapshotImageAttached } = await this.captureSnapshotAndViewHierarchy();
                const code = await this.generateCode(step, previous, snapshot, viewHierarchy, isSnapshotImageAttached);
                lastCode = code;
                if (!code) {
                    throw new Error('Failed to generate code from intent');
                }
                return await this.codeEvaluator.evaluate(code, this.context);
            }
            catch (error) {
                lastError = error;
                console.log('\x1b[33m%s\x1b[0m', `Attempt ${attempt} failed for step "${step}": ${error instanceof Error ? error.message : error}`);
                if (attempt < attempts) {
                    console.log('\x1b[33m%s\x1b[0m', 'Copilot is retrying...');
                    const resultMessage = lastCode
                        ? `Caught an error while evaluating "${step}", tried with generated code: "${lastCode}". Validate the code against the APIs and hierarchy and continue with a different approach. If can't, return a code that throws a descriptive error.`
                        : `Failed to perform "${step}", could not generate prompt result. Let's try a different approach. If can't, return a code that throws a descriptive error.`;
                    previous = [
                        ...previous,
                        {
                            step,
                            code: lastCode ?? 'undefined',
                            result: resultMessage,
                        },
                    ];
                }
            }
        }
        throw lastError;
    }
}
exports.StepPerformer = StepPerformer;
